# ===============================================================================================================#
# Copyright 2022 Infosys Ltd.                                                                                   #
# Use of this source code is governed by Apache License Version 2.0 that can be found in the LICENSE file or at  #
# http://www.apache.org/licenses/                                                                                #
# ===============================================================================================================#

from abc import ABC, abstractmethod
from typing import List
from ..orchestrator import OrchestratorNativeBasic
from ..data import (ProcessorResponseData,
                    ControllerRequestData, ControllerResponseData)


class IController(ABC):
    """Interface for accepting input from external systems for executing processor(s). 
       E.g, CLI, REST API, etc."""

    def __init__(self):
        self.__controller_request_data = None
        self.__input_config_data = None
        self.__document_data_list, self.__context_data_list = None, None
        # self.__load_data()

    @abstractmethod
    def do_execute_batch(self, controller_request_data: ControllerRequestData) -> ControllerResponseData:
        """Execute the processor(s)"""
        self.__controller_request_data = controller_request_data
        self.__load_data()
        return self.__do_run_batch()

    @abstractmethod
    def receive_request(self) -> ControllerRequestData:
        """Receive the request data from caller. E.g, CLI, REST API, etc."""
        raise NotImplementedError

    @abstractmethod
    def send_response(self, controller_response_data: ControllerResponseData) -> any:
        """Send the response data to the caller. E.g, CLI, REST API, etc."""
        raise NotImplementedError

    @abstractmethod
    def load_config_data(self, controller_request_data: ControllerRequestData) -> dict:
        """Load config data"""
        raise NotImplementedError

    @abstractmethod
    def load_snapshots(self, controller_request_data: ControllerRequestData):
        """Load snapshot(s) to memory"""
        raise NotImplementedError

    @abstractmethod
    def save_snapshots(self, controller_request_data: ControllerRequestData,
                       processor_response_data_list: List[ProcessorResponseData]) \
            -> ControllerResponseData:
        """Save snapshot(s) to storage"""
        raise NotImplementedError

    # Private methods
    def __do_run_batch(self) -> ControllerResponseData:
        """Run the processor(s)"""
        orchestrator_native_obj = OrchestratorNativeBasic(
            input_config_data=self.__input_config_data)
        document_data_list, context_data_list = self.__document_data_list, self.__context_data_list
        processor_response_data_list: List[ProcessorResponseData] = orchestrator_native_obj.run_batch(
            document_data_list, context_data_list)
        controller_response_data: ControllerResponseData = self.save_snapshots(
            self.__controller_request_data, processor_response_data_list)
        controller_response_data.description = "Auto-generated by DPP controller"
        return controller_response_data
        # self.send_response(controller_response_data)

    def __load_data(self):
        """Load data from request and config"""
        # Load request data
        # controller_request_data: ControllerRequestData = self.receive_request()
        controller_request_data = self.__controller_request_data
        # Load config data
        input_config_data = self.load_config_data(
            controller_request_data)

        # Filter processors
        input_config_data["processor_list"] = self.__filter_processors(
            controller_request_data, input_config_data)
        self.__input_config_data = input_config_data

        # Load document data and context data
        self.__document_data_list, self.__context_data_list = self.load_snapshots(
            controller_request_data)
        self.__controller_request_data = controller_request_data

    def __filter_processors(self, controller_request_data: ControllerRequestData,
                            input_config_data: dict):
        """Filter processors"""
        requested_processor_list = []

        # Include/Exclude processors as requested
        if controller_request_data.processor_filter:
            includes = controller_request_data.processor_filter.includes
            excludes = controller_request_data.processor_filter.excludes
        else:
            includes, excludes = [], []
        valid_processors = [x["processor_name"]
                            for x in input_config_data["processor_list"]]

        # Find any requested processors not present in input_config_data
        invalid_processors = [x for x in includes +
                              excludes if x not in valid_processors]
        if invalid_processors:
            message = f"Invalid processors found in 'processor_filter' section of request file = {invalid_processors} "
            raise ValueError(message)
        if includes:
            requested_processor_list = [x for x in input_config_data["processor_list"]
                                        if x["processor_name"] in includes]
        elif excludes:
            requested_processor_list = [x for x in input_config_data["processor_list"]
                                        if x["processor_name"] not in excludes]
        else:
            requested_processor_list = input_config_data["processor_list"]

        return requested_processor_list
